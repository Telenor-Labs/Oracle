- name: deploy and init NSSF DB  to openshift
  hosts: 10.6.1.6
  vars:
    namespace: oracle-defence-nssf
    docker_registry_user: oracle
    docker_registry_password: oracle123
    push_docker_registry: hubcluster-registry-quay-quay-enterprise.apps.mgmt.next.lab
    install_path: /home/oracle/NFs/NSSF
    playbook_path: /home/oracle/telenorPlaybooks/NSSF
    custom_file: ocnssf-custom-Defence-values-22.1.1.yaml
  tasks:
  - name: oc login
    shell: "oc login -u oracle -p oracle123 https://api.secure.next.lab:6443"
    register: oc_login
    until: item in oc_login.stdout
    retries: 10
    delay: 30
    with_items:
      - Login successful

#docker login to openshift docker registry
  - name: docker login to openshift docker registry
    shell: "podman login {{push_docker_registry}} -u {{docker_registry_user}} -p {{docker_registry_password}}"
    register: ocnssf_docker_login_docker_registry
    until: item in ocnssf_docker_login_docker_registry.stdout
    retries: 10
    delay: 30
    with_items:
      - Login Succeeded

#create oc project in openshift
  - name: create oc project in openshift
    shell: |
        kubectl delete ns {{namespace}}
        sleep 60
        kubectl create ns {{namespace}}
        sleep 10
    register: oc_create_project_output 
  - name: debugging oc_create_project_output
    debug:
      var: oc_create_project_output

#Create DB Secrets
  - name: create db secrets
    shell: |
        kubectl create secret generic nssf-privilegeduser-db-secret --from-literal=mysql-username=nssfPrivilegedUsr --from-literal=mysql-password=nssfPrivilegedPasswd --from-literal=dbName=nssfdb -n {{namespace}}
        kubectl create secret generic nssf-appuser-db-secret --from-literal=mysql-username=nssfApplicationUsr --from-literal=mysql-password=nssfApplicationPasswd --from-literal=dbName=nssfdb -n {{namespace}}
        kubectl create secret docker-registry quay  --docker-server=hubcluster-registry-quay-quay-enterprise.apps.mgmt.next.lab/oracle --docker-username=oracle --docker-password=oracle123 --docker-email=alain.oteo.gonzalez@oracle.com -n {{namespace}}

    register: create_db_secrets
  - name: debugging create_db_secrets
    debug:
      var: create_db_secrets

      #create service account
  - name: create service account
    shell: |
        kubectl apply -f  {{playbook_path}}/ocnssf-resource-template.yaml -n {{namespace}}
        sleep 10
        kubectl patch serviceaccount default -p '{"imagePullSecrets": [{"name": "quay"}]}' -n {{namespace}}
    register: create_svcaccount
  - name: debugging create_svcaccount
    debug:
      var: create_svcaccount

#create ocnssf mysql db
  - name: create ocnssf mysql db
    shell: |
        kubectl create -f {{playbook_path}}/ocnssf-mysql-pvc.yaml -n {{namespace}}
        sleep 10
        kubectl create -f {{playbook_path}}/mysql-nssf-deployment.yaml -n {{namespace}}
        sleep 60

    register: oc_create_ocnssf_db_output
  - name: debugging oc_create_ocnssf_db_output
    debug:
      var: oc_create_ocnssf_db_output

#init DB
  - name: init ocnssf mysql db
    shell: kubectl -n {{namespace}} exec -it $(kubectl  -n {{namespace}} get pods| grep mysql-nssf ) --  /usr/bin/mysql -proot -uroot <  {{playbook_path}}/ocnssf-db-resource-standalone.sql
    register: oc_db_create
  - name: debugging oc_db_create
    debug:
      var: oc_db_create

#helm install OCNSSF
  - name: helm install ocnssf
    shell: helm install ocnssf --namespace {{namespace}} {{install_path}}/ocnssf-22.1.1.tgz -f {{install_path}}/{{custom_file}}
    register: helm_install
  - name: debugging helm_install
    debug:
      var: helm_install
#NSSF CONFIG
  - name: import NSSF config
    shell: |
        cat {{playbook_path}}/NSSF_BACKUP.json | kubectl exec -i -n oracle-defence-nssf  $(kubectl -n oracle-defence-nssf get pods |grep ocnssf-nsconfig)  -- /bin/bash -c "cat > /tmp/NSSF_BACKUP.json"
        kubectl exec -i -n oracle-defence-nssf  $(kubectl -n oracle-defence-nssf get pods |grep ocnssf-nsconfig)  -- curl --http2-prior-knowledge http://ocnssf-ingress-gateway.oracle-defence-nssf/nnssf-configuration/v1/upload  -H 'Content-Type: application/json' -d @/tmp/NSSF_BACKUP.json
    register: nssf_config
  - name: debugging nssf_config
    debug:
      var: nssf_config
